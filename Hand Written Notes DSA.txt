DSA Notes (8:00pm - 9:30pm)
NOTE: 
	- class on every alternate days
	- practice questions You have to solve it
	- share with me on Discord/ Telegram/ Insta
	- if facing problems just connect with me
	- NO AI TOOLS TO CODE
	- full participation of students

---------- Class 1 (Into) -----------
Data is a information stored somewhere
Structure the process of organizing the things properly.

Data Structure: are diff ways of organizing data on your computer in such a way that can be used effeciently.

Eg:- 
	- 1. mesy way of bicks
	- 2. organized way of brikes (select)

so in order to work with data we have to fist orgamized it properly and then we can work with it in more efficient way.	

s/w point of view: 
	- efficiency 
	- performance
these things will rely of how you have stored, organized and grouped together during the program execution.

Daily life example:
	- students / people standing in queue for there turn (queue)
	- order in a restaurent


What is Algorithm?
	set of instructions to perform a task

eg:- 
	- driving a car
	- find the path b/w 2 points
	- withdraw the money from ATM
	- cooking a dish: 
		- what to cook (fry rice)
		- boil the rice
		- rince the excess water
		- prepare the chok
		- mix the rice with chok 
		- server it

make sure we will select the proper algo


computer science: it is a set of rules of a computer program to complet a task.

		Input Data
			|
			|
		calculation
			|
			|
	stop when we got the answer


we must Know when to use which algo for creating the memory and speed efficient program.

Foutune 500 : use some type of algo

Compression Algorithm: text, speech, audio, photo, video (Google and Facebook)
Graph Algorithm: to find the shortest path.


What makes a good algorithm?
	- Correctness
	- Efficiency


Why DSA is important?
	Because we have to process the data effeciently

input(data):
	- mon
	- tue
	- wed
	- thur
	- 50,45,35,49

process
	- arranging
	- sorting
	- combining
	- mathamatical operations

output(information):
	- temperature
	- mon - 50
	- tue - 45
	- wed - 35
	- thur - 49

our responsiblity is to optimize the process


eg: go to market to by the fruits
	input : set the location on map
	process: less Trafic, less time, fule efficient, no toll plaza
	output: base on the process and input we have done.

lib: we have book in organized way
maintance day: pile of books (diff to find a book)


Why compnaies ask the Question from DSA?
	- Judge your skills (ask the fundamentals of program)
	- Problam solving skills.



------------- Class 2 ---------------
Revision:
	- What is data structure?
	- What is Algorithm?

Different types of Data Structure
	two type
	- Primitive: 
		-basic data types that can not be broken down into simpler data type.
		- fix size 
		- simple operations
		- represent in memory as a simple value.
	- Non Primitive: 
		- more complex and can be broken ddown into smaller data types.
		- size if variable
		- complex operations data manipulation, sorting or searching.
		- represent as a pointer in memeory


Primitive:
	- Integer
	- Float
	- string
	- boolean
	
Non Primitive
	- Linear (sequencial order)
		- list
		- tuple
		- arrays
		- Linked List
		- Stack
		- Queue
	- Non Linera (not in sequencial order)
		- Set
		- dictionary
		- Tree
		- Graph
		

Why do we need these Data Structure?
		
Type of Algorithm
	- Sorting Algorithm: arrange data in ascending or descending way.
		(Bobble sort, Selection Sort, insertion sort, etc)
	- Searching Algorithm: to find sepific value in data set.
		(linear search, binary seach, orhter searching tech.)
	- Graph Algorithm: use when the data is in represented as a graph format.
		(Dijkstra's, DFS, BFS etc.)
	- Dynamic Programming Algorithm:  techniques for solving complex problem.
		(Knspsack problem)
	- Divide and Conquer Algorithm: divide the big problem into small chunks (merge sort or quick sort).
	- Recursive Algorithm: the function call itself.
	
quiz:

Why do we need data structure and algorithms?
	1. To develop software
	2. To run our developed software
	3. To develop memory and time efficient application
Ans: 3

**What is primitive data structure?**
	1. Built in data structure in any given programming language
	2. user defined data structure.
Ans: 1

**Please select non primitive data structure.**
	1. Integer
	2. String
	3. Boolean
	4. Array
Ans: 4

**Which of the following is NOT a linear data structure?**
	1. Array 
	2. Linked List 
	3. Stack
	4. Queue
	5. Tree
Ans: 5

---
Big O Notations
	language and metric we use to describe the efficiency of algorithm.
	
Note: it gives you the one way of describing how much time that application takes to run your application grows as the size of the input grows.

Time Complexity: it's way of showing how the runtime of the function increases as the size of input increases.


Big O is a way of methematically figuring out which code is better, which runs more effeciently


Time Complexity
	code 1		30sec
	code 2		60sec
	
Space complexity
	code 1		30sec 	14space
	code 2 		60sec 	3space

256 gb storage in phone: 10 


---------- class 3 ----------------
Big O Notations
	Car: 
		15/l
	- city driving - 12/lt
	- highway driving - 17/lt
	- mix condition - 13/lt

3 diff cases
	- best case
	- average case
	- worst case
	
3 greek letters
	- omega:- best case (first value)
		1 2 3 4 5 6 7 8
		-
	- Theta:- avg case (last value)
		1 2 3 4 5 6 7 8
					  -
	- Omicron:- worst case (mid value)
		1 2 3 4 5 6 7 8
			  -
We always have mesure the worst case that is Big O

big O and big theta is mostly in the academics, but for industry we use the Big O


Run Time Complexity
	- O(1) - Constant - A simple add nuber function
	- O(N) - Linear - Loop through number from 1 to n.
	- O(LogN) - Logarithmic - Find an element in sorted array.
	- O(N^2) - Quadratic - Nested loop
	- O(2^n) - Exponential - Double recursion in fibonacci.
	
O(1) - Constant	
	eg: take a random card out of deck of card

	O(1) 
	public static int multipleyNo(int n) {
		return n*n;
	}
	
O(N) - Linear
	eg: select the specific card out of deck of card.
	
	public static void displayNumber(int n) {
		for(int i=0; i<=n;i++) {
			System.out.print(i+" ");
		}
	}


Drop constants
		for(int i=0; i<=n;i++) {
			System.out.print(i+" "); // O(n)
		}
		for(int i=0; i<=n;i++) {
			System.out.print(i+" "); // O(n)
		}
	
	O(n+n) =O(2n) = O(n)

why we remove the constants?
	- used to reduce the noice from program
	- a*(b-c) vs a*b - a*c
	- 2*(5-3) vs 2*5 - 2*3
	- 2*(2) vs 10-6
	- 4 vs 4

O(N^2) - Quadratic
	eg: find the pair of each card
	
	for(int i=0; i<=n;i++) {
		for(int j=0;j<=n;j++) {
			System.out.print(i+" "+j+"  ");
		}
		System.out.println();
	}
	-----
	
	for(int i=0; i<=n;i++) {
		for(int j=0;j<=n;j++) {
			for(int k=0;k<=n;k++) {
				System.out.print(i+" "+j+" "+k+"  ");
			}
		}
		System.out.println();
	}
	O(n^3)
	
	---
	for(int i=0; i<=n;i++) {
		for(int j=0;j<=n;j++) {
			System.out.print(i+" "+j+"  "); // O(n^2)
		}
		System.out.println();
	}
	
	for(int j=0;j<=n;j++) {
		System.out.print(j); // o(n)
	}

drop the non dominat terms
	O(n^2 + n)
	O(n^2)



