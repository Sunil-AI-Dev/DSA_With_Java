DSA Notes (8:00pm - 9:30pm)
NOTE: 
	- class on every alternate days
	- practice questions You have to solve it
	- share with me on Discord/ Telegram/ Insta
	- if facing problems just connect with me
	- NO AI TOOLS TO CODE
	- full participation of students

---------- Class 1 (Into) -----------
Data is a information stored somewhere
Structure the process of organizing the things properly.

Data Structure: are diff ways of organizing data on your computer in such a way that can be used effeciently.

Eg:- 
	- 1. mesy way of bicks
	- 2. organized way of brikes (select)

so in order to work with data we have to fist orgamized it properly and then we can work with it in more efficient way.	

s/w point of view: 
	- efficiency 
	- performance
these things will rely of how you have stored, organized and grouped together during the program execution.

Daily life example:
	- students / people standing in queue for there turn (queue)
	- order in a restaurent


What is Algorithm?
	set of instructions to perform a task

eg:- 
	- driving a car
	- find the path b/w 2 points
	- withdraw the money from ATM
	- cooking a dish: 
		- what to cook (fry rice)
		- boil the rice
		- rince the excess water
		- prepare the chok
		- mix the rice with chok 
		- server it

make sure we will select the proper algo


computer science: it is a set of rules of a computer program to complet a task.

		Input Data
			|
			|
		calculation
			|
			|
	stop when we got the answer


we must Know when to use which algo for creating the memory and speed efficient program.

Foutune 500 : use some type of algo

Compression Algorithm: text, speech, audio, photo, video (Google and Facebook)
Graph Algorithm: to find the shortest path.


What makes a good algorithm?
	- Correctness
	- Efficiency


Why DSA is important?
	Because we have to process the data effeciently

input(data):
	- mon
	- tue
	- wed
	- thur
	- 50,45,35,49

process
	- arranging
	- sorting
	- combining
	- mathamatical operations

output(information):
	- temperature
	- mon - 50
	- tue - 45
	- wed - 35
	- thur - 49

our responsiblity is to optimize the process


eg: go to market to by the fruits
	input : set the location on map
	process: less Trafic, less time, fule efficient, no toll plaza
	output: base on the process and input we have done.

lib: we have book in organized way
maintance day: pile of books (diff to find a book)


Why compnaies ask the Question from DSA?
	- Judge your skills (ask the fundamentals of program)
	- Problam solving skills.



------------- Class 2 ---------------
Revision:
	- What is data structure?
	- What is Algorithm?

Different types of Data Structure
	two type
	- Primitive: 
		-basic data types that can not be broken down into simpler data type.
		- fix size 
		- simple operations
		- represent in memory as a simple value.
	- Non Primitive: 
		- more complex and can be broken ddown into smaller data types.
		- size if variable
		- complex operations data manipulation, sorting or searching.
		- represent as a pointer in memeory


Primitive:
	- Integer
	- Float
	- string
	- boolean
	
Non Primitive
	- Linear (sequencial order)
		- list
		- tuple
		- arrays
		- Linked List
		- Stack
		- Queue
	- Non Linera (not in sequencial order)
		- Set
		- dictionary
		- Tree
		- Graph
		

Why do we need these Data Structure?
		
Type of Algorithm
	- Sorting Algorithm: arrange data in ascending or descending way.
		(Bobble sort, Selection Sort, insertion sort, etc)
	- Searching Algorithm: to find sepific value in data set.
		(linear search, binary seach, orhter searching tech.)
	- Graph Algorithm: use when the data is in represented as a graph format.
		(Dijkstra's, DFS, BFS etc.)
	- Dynamic Programming Algorithm:  techniques for solving complex problem.
		(Knspsack problem)
	- Divide and Conquer Algorithm: divide the big problem into small chunks (merge sort or quick sort).
	- Recursive Algorithm: the function call itself.
	
quiz:

Why do we need data structure and algorithms?
	1. To develop software
	2. To run our developed software
	3. To develop memory and time efficient application
Ans: 3

**What is primitive data structure?**
	1. Built in data structure in any given programming language
	2. user defined data structure.
Ans: 1

**Please select non primitive data structure.**
	1. Integer
	2. String
	3. Boolean
	4. Array
Ans: 4

**Which of the following is NOT a linear data structure?**
	1. Array 
	2. Linked List 
	3. Stack
	4. Queue
	5. Tree
Ans: 5

---
Big O Notations
	language and metric we use to describe the efficiency of algorithm.
	
Note: it gives you the one way of describing how much time that application takes to run your application grows as the size of the input grows.

Time Complexity: it's way of showing how the runtime of the function increases as the size of input increases.


Big O is a way of methematically figuring out which code is better, which runs more effeciently


Time Complexity
	code 1		30sec
	code 2		60sec
	
Space complexity
	code 1		30sec 	14space
	code 2 		60sec 	3space

256 gb storage in phone: 10 


---------- class 3 ----------------
Big O Notations
	Car: 
		15/l
	- city driving - 12/lt
	- highway driving - 17/lt
	- mix condition - 13/lt

3 diff cases
	- best case
	- average case
	- worst case
	
3 greek letters
	- omega:- best case (first value)
		1 2 3 4 5 6 7 8
		-
	- Theta:- avg case (last value)
		1 2 3 4 5 6 7 8
					  -
	- Omicron:- worst case (mid value)
		1 2 3 4 5 6 7 8
			  -
We always have mesure the worst case that is Big O

big O and big theta is mostly in the academics, but for industry we use the Big O


Run Time Complexity
	- O(1) - Constant - A simple add nuber function
	- O(N) - Linear - Loop through number from 1 to n.
	- O(LogN) - Logarithmic - Find an element in sorted array.
	- O(N^2) - Quadratic - Nested loop
	- O(2^n) - Exponential - Double recursion in fibonacci.
	
O(1) - Constant	
	eg: take a random card out of deck of card

	O(1) 
	public static int multipleyNo(int n) {
		return n*n;
	}
	
O(N) - Linear
	eg: select the specific card out of deck of card.
	
	public static void displayNumber(int n) {
		for(int i=0; i<=n;i++) {
			System.out.print(i+" ");
		}
	}


Drop constants
		for(int i=0; i<=n;i++) {
			System.out.print(i+" "); // O(n)
		}
		for(int i=0; i<=n;i++) {
			System.out.print(i+" "); // O(n)
		}
	
	O(n+n) =O(2n) = O(n)

why we remove the constants?
	- used to reduce the noice from program
	- a*(b-c) vs a*b - a*c
	- 2*(5-3) vs 2*5 - 2*3
	- 2*(2) vs 10-6
	- 4 vs 4

O(N^2) - Quadratic
	eg: find the pair of each card
	
	for(int i=0; i<=n;i++) {
		for(int j=0;j<=n;j++) {
			System.out.print(i+" "+j+"  ");
		}
		System.out.println();
	}
	-----
	
	for(int i=0; i<=n;i++) {
		for(int j=0;j<=n;j++) {
			for(int k=0;k<=n;k++) {
				System.out.print(i+" "+j+" "+k+"  ");
			}
		}
		System.out.println();
	}
	O(n^3)
	
	---
	for(int i=0; i<=n;i++) {
		for(int j=0;j<=n;j++) {
			System.out.print(i+" "+j+"  "); // O(n^2)
		}
		System.out.println();
	}
	
	for(int j=0;j<=n;j++) {
		System.out.print(j); // o(n)
	}

drop the non dominat terms
	O(n^2 + n)
	O(n^2)



----------------- Class 4 ---------------
O(LogN) - Logarithmic

sorted array = 1 2 3 4 5 6 7 8
	find no 1
	
1 2 3 4 | 5 6 7 8
1 2 | 3 4
1 | 2
Answer: 1

how may steps to find number 1
it took 3 steps

log2 8 = 3
2*2*2 = 8

we have to find what power of 2 is 8


Add vs Multiply

Addition
	for(int i =0; i<=n; i++) {
		System.out.print(i+" "); //O(n)
	}
	for(int j =0; j<=n; j++) {
		System.out.print(j+" "); //O(n)
	}
	
O(n+n) = O(2n)
O(n)
	public static void printNumber(int a, int b){
		for(int i =0; i<=a; i++) {
			System.out.print(i+" ");  // O(a)
		}
		for(int j =0; j<=b; j++) {
			System.out.print(j+" "); // O(b)
		}
	}
O(a+b)

Multiply
	public static void printNumber(int a, int b){
		for(int i =0; i<=a; i++) {
			for(int j =0; j<=b; j++) {
				System.out.print(i+" "+j+"  ");
			}
		}
	}
O(a*b)


--Space Complexity--
it is the amount of the working storage that an algorithm needs.  That means how much memory in the worst case is need at any point in algorithm.

public static int sumNum(int n) {
		if(n<=0) {
			return 0;
		}
		return n+sumNum(n-1);
	}
	public static void main(String[] args) {
		sumNum(5);
	}
	
How to measure code Big O
	- any assignment stmt and if stmt that are executed once -- O(1)
	- simple for loop -- O(n)
	- nested loop -- O(n^2)
	- loop in which the contolling parameters is dividing by two at each step --- O(log n)
	
	
	public static void totalValue(int n) {
		var total =0; //------------------ O(1)
		for (int i=0 ;i<=n; i++) { //----- O(n)
			total +=1; //----------------- O(1)
		}
		if(total >50) { //---------------- O(1)
			System.out.println("Sum is greater than 50"); //----------------------------- O(1)
		}else {
			System.out.println(total); //-- O(1)
		}
	}

time complexity: O(1)+O(n)+O(1)+O(1)+O(1)+O(1) = O(n)


Quiz: 
Question 1:What is the time complexity of the following Java code snippet?
	int sum = 0;
	for (int i = 0; i < n; i++) {
		sum += i;
	}

	1. O(1)
	2. O(n)
	3. O(n^2)
	4. O(log n)
	
Ans: 2. O(n)


Question 2: What is the time complexity of the following Java code snippet?
	for (int i = 1; i <= n; i *= 2) {
		System.out.println(i);
	}

	1. O(1)
	2. O(n)
	3. O(n^2)
	4. O(log n)

Ans: 4. O(log n)


Question 3: What is the time complexity of the following Java code snippet?
int sum = 0;
 for (int i = 0; i < n; i++) {
  for (int j = 0; j < n; j++) {
   sum += i * j;
  }
}

	1. O(1)
	2. O(n)
	3. O(n^2)
	4. O(n^3)

Ans: 3. O(n^2)

Question 4: What is the time complexity of the following Java code snippet?
	int sum = 0;
	for (int i = 0; i < n; i++) {
		for (int j = i; j < n; j++) {
			sum += i * j;
		}
	}

	1. O(1)
	2. O(n)
	3. O(n^2)
	4. O(n*log n)

Ans: 3. O(n^2)

Question 5: What is the time complexity of the following Java code snippet?
	int sum = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j *= 2) {
			sum += i * j;
		}
	}

	1. O(1)
	2. O(n)
	3. O(n^2)
	4. O(n*log n)
	
Ans: 3. O(n^2)


Question 6: What is the time complexity of the following Java code snippet?
	int sum = 0;
	for (int i = 0; i < n; i++) {
		sum += i;
	}
	for (int j = 0; j < n; j++) {
		sum += j;
	}

	1. O(1)
	2. O(n)
	3. O(n^2)
	4. O(2n)
	
Ans: 2. O(n)


--------------- Class 5 ------------
What is Array?
collection of same type of data or collection of objects or things.
they are very powerful data structure that stores list of elements.

Array example: 
	- roll number of student
	- cloths in almera 
	- books in shelf
	
values can be accessed by using the position.

Array= 		4,3,2,6,8,7,9
position = 	0,1,2,3,4,5,6


Why do we need an array
	store 3 value -> i can use variable 
	500 values -> Array

Types of Array:
	- One Dimensional
	- Multi Dimensional
		- 2d
		- 3d
		- 4d
		- nd

One Dimensional: store data in row or column
a = 5,6,8,9,7,2,1,6,7
	0,1,2,3,4,5,6,7,8
	
a[4] = 7
a[8] = 7

Two Dimensional Arrya: in the form of matrix
	1	2	3
a=	4	5	6
	7	8	9

a[1][2]=6
a[2][1]=8

Three Dimensional Array: rubic cube
000, 001, 002: Row
000, 010, 020: col
000, 100, 200: dep
	

Array in memory: in pdf


How to create an array?
	- decalre: create a referance to array
	- instantiation of an arrya: creates an array
	- intitialization: value to array.
	
	
	int arr[];			// O(1)
	arr= new int[3];	// O(1)
	arr[0]=10;		// O(1)
	arr[1]=20;		// O(1)		//O(n)
	arr[2]=30;		// O(1)
	System.out.println(Arrays.toString(arr));
	String sArr[] = {"a","b","c"}; 		//O(1)
	System.out.println(Arrays.toString(sArr));

Inset into array
	if array is full then create the new array


Accessing the elements: selecting a specific value from list
Traversing the array: 
	visiting each element of an array/list.

Serch values in array:
	arr1= a,b,c,d,e,f
		  0,1,2,3,4,5
		  
	arr2= 1,2,3,4,5,6,7,8
		  0,1,2,3,4,5,6,7
	

Delete the element from the array
	if value deleted the space will be Integer.MIN_VALUE;
	-2^31
	
	delete 30
	
10,20,-2^31,40,50,60

Space and time complexity of 1D array
	Operation				Time		Space
- create an empty array 	O(1)		O(n)
- Inserting value array 	O(1)		O(1)
- traversing an array		O(n)		O(1)
- Accessing a value			O(1)		O(1)
- Searching a value			O(n)		O(1)
- Delete a given value		O(1)		O(1)



